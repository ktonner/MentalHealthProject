{"version":3,"sources":["Pages/Home.js","components/Checkbox.js","components/Input/Input.js","components/Calendar/Calendar.js","Pages/Prescriptions.js","App.js","components/IndexDB/script.js","serviceWorker.js","index.js"],"names":["Home","className","href","rel","Checkbox","props","map","type","key","Form","Check","id","label","onChange","React","Component","OPTIONS","Input","state","checkboxes","reduce","options","option","prescriptions","handleCheckboxChange","event","name","target","status","checked","console","log","Object","keys","setState","prevState","createCheckbox","isSelected","createCheckboxes","preventDefault","form","input","children","this","value","newP","push","filtered","filter","localStorage","setItem","onSubmit","addToCalendar","bind","InputGroup","Prepend","Text","Control","placeholder","aria-label","aria-describedby","Button","Calendar","weekdaysname","moment","weekdays","day","Table","Prescriptions","Container","Row","Col","initDB","version","objectStoresMeta","store","storeConfig","keyPath","autoIncrement","storeSchema","keypath","unique","App","integrity","crossorigin","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c2dcf30b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home(){\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\r\n        <p>\r\n          Brain Fort\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href='/enter'\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Get Started\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home","import React from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\n\r\nclass Checkbox extends React.Component {\r\n    render(props) {\r\n        return (\r\n            <div>\r\n                {['checkbox'].map((type) => (\r\n                    <div key={`default-${type}`} className=\"mb-3\">\r\n                        <Form.Check\r\n                            type={type}\r\n                            id={this.props.label}\r\n                            label={this.props.label}\r\n                            onChange={this.props.onChange}\r\n                        />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Checkbox","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Checkbox from '../Checkbox'\r\nimport css from './style.css'\r\n\r\n//these are all the checkbox options and will not change\r\nconst OPTIONS = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Every day\"]\r\n\r\nclass Input extends React.Component {\r\n\r\n  state = {\r\n    checkboxes: OPTIONS.reduce(\r\n      (options, option) => ({\r\n        ...options,\r\n        [option]: false\r\n      }),\r\n      {}\r\n    ),\r\n    prescriptions: []\r\n  };\r\n\r\n  handleCheckboxChange = event => {\r\n    //grabbing the name and the true/false status\r\n    const name = event.target.id\r\n    const status = event.target.checked;\r\n    console.log(status, name )\r\n    const checkboxes = this.state.checkboxes\r\n    console.log(Object.keys(checkboxes))\r\n    this.setState(prevState => ({\r\n      checkboxes: {\r\n        ...prevState.checkboxes,\r\n        [name]: !prevState.checkboxes[name]\r\n      }\r\n    })\r\n    );\r\n    console.log(this.state)\r\n  };\r\n\r\n  createCheckbox = option => (\r\n    <Checkbox\r\n      label={option}\r\n      type=\"checkbox\"\r\n      isSelected={this.state.checkboxes[option]}\r\n      onChange={this.handleCheckboxChange}\r\n      key={option}\r\n    />\r\n  );\r\n\r\n  createCheckboxes = () => OPTIONS.map(this.createCheckbox);\r\n\r\n\r\n  addToCalendar(event) {\r\n    event.preventDefault();\r\n    //this selects the div with all the checkboxes\r\n    let form = event.target\r\n    console.log(form)\r\n    //selects just the text input component\r\n    let input = form.children[0].children[1]\r\n    let prescriptions = this.state.prescriptions\r\n    console.log(input.value)\r\n    //No blank inputs\r\n    if (input.value != \"\") {\r\n      let newP = prescriptions.push(input.value)\r\n\r\n      this.setState(\r\n        state => {\r\n          return {\r\n            prescriptions: newP\r\n          }\r\n        });\r\n      console.log(this.state)\r\n      //Only getting the days that are true from the state\r\n      let checkboxes = this.state.checkboxes\r\n      let keys = Object.keys(checkboxes)\r\n      let filtered = keys.filter(function(key) {\r\n        return checkboxes[key]})\r\n      //stored where the Prescription has a value of the days it is taken\r\n      localStorage.setItem(input.value, filtered)\r\n    }\r\n\r\n    // Object.keys(this.state.checkboxes)\r\n    //   .filter(checkbox => this.state.checkboxes[checkbox])\r\n    //   .forEach(checkbox => {\r\n    //     console.log(checkbox, \"is selected.\");\r\n    //   });\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div id='input'>\r\n        <Form onSubmit={this.addToCalendar.bind(this)}>\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"basic-addon1\">Enter the Name of your Prescription</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              placeholder=\"Prescription\"\r\n              aria-label=\"Prescription\"\r\n              aria-describedby=\"basic-addon1\"\r\n            />\r\n          </InputGroup>\r\n          {this.createCheckboxes()}\r\n          <Button type='submit'>Add</Button>\r\n        </Form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Input","import React from 'react';\r\nimport moment from 'moment'\r\nimport Table from 'react-bootstrap/Table'\r\nimport css from './style.css'\r\n\r\nfunction Calendar(){\r\n    const weekdays = moment.weekdays();\r\n    const weekdaysname = weekdays.map(day => {\r\n        return (\r\n          <th key={day} className=\"week-day\">\r\n           {day}\r\n          </th>\r\n        );\r\n     });\r\n     return(\r\n      <Table>\r\n         {weekdaysname}\r\n         <tr>\r\n           <td></td>\r\n           <td></td>\r\n           <td></td>\r\n           <td></td>\r\n           <td></td>\r\n           <td></td>\r\n           <td></td>\r\n         </tr>\r\n      </Table>\r\n     )\r\n}\r\n\r\nexport default Calendar","import React from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Col from 'react-bootstrap/Col' \r\nimport Row from 'react-bootstrap/Row'\r\nimport Input from '../components/Input/Input'\r\nimport css from './Prescriptions.css'\r\nimport Calendar from '../components/Calendar/Calendar'\r\n\r\nfunction Prescriptions () {\r\n    return(\r\n        <Container>\r\n        <Row>\r\n        <h1>What prescriptions are you taking currently?</h1>\r\n        </Row>\r\n        <Row>\r\n        <Col>\r\n        <Input/>\r\n        </Col>\r\n        <Col>\r\n        <Calendar/>\r\n        </Col>\r\n        </Row>\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\nexport default Prescriptions","import React from 'react';\r\nimport './App.css';\r\nimport { DBConfig } from './components/IndexDB/script';\r\nimport { initDB } from 'react-indexed-db';\r\nimport Home from './Pages/Home'\r\nimport Prescriptions from './Pages/Prescriptions'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch\r\n} from 'react-router-dom';\r\nimport Container from 'react-bootstrap/Container'\r\n\r\ninitDB(DBConfig);\r\n\r\nconst App = () => (\r\n  <div>\r\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css\" integrity=\"sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO\" crossorigin=\"anonymous\"/>\r\n    <Router>\r\n    <Switch>\r\n      <Route exact path='/' component={Home} />\r\n      <Route exact path='/enter' component={Prescriptions} />\r\n    </Switch>\r\n    </Router>\r\n  </div>\r\n)\r\n\r\nexport default App;\r\n","export const DBConfig = {\r\n    name: 'Brain Fort',\r\n    version: 1,\r\n    objectStoresMeta: [\r\n      {\r\n        store: 'Prescriptions',\r\n        storeConfig: { keyPath: 'id', autoIncrement: true },\r\n        storeSchema: [\r\n          { name: 'name', keypath: 'name', options: { unique: false } },\r\n          { name: 'days', keypath: 'days', options: { unique: false } }\r\n        ]\r\n      }\r\n    ]\r\n  };","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}